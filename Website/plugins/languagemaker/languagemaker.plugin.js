// Generated by CoffeeScript 1.12.5

/*
Creates virtual documents for additional languages based on the documents that
exist for the default language.

If a given document already really exists on disk, it won't be overwritten.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = function(BasePlugin) {
    var LanguageMaker, TaskGroup, fs, path;
    path = require('path');
    fs = require('fs');
    TaskGroup = require('taskgroup').TaskGroup;
    return LanguageMaker = (function(superClass) {
      extend(LanguageMaker, superClass);

      function LanguageMaker() {
        return LanguageMaker.__super__.constructor.apply(this, arguments);
      }

      LanguageMaker.prototype.name = 'languagemaker';

      LanguageMaker.prototype.config = {
        defaultLanguage: 'en',
        languages: [],
        rootToDocumentsPathFragment: 'src/documents'
      };

      LanguageMaker.prototype.contextualizeAfterLock = false;

      LanguageMaker.prototype.populateCollections = function(opts, next) {
        var config, docpad, pathStart, tasks;
        docpad = this.docpad;
        config = this.config;
        docpad.log('debug', 'languagemaker: making language files');
        if (Array.isArray(config.languages) && config.languages.length === 0) {
          config.languages = docpad.config.templateData.languages;
        }
        if (!Array.isArray(config.languages) || !config.languages.length > 0) {
          throw 'languagemaker: no languages to make';
        }
        pathStart = path.normalize(config.defaultLanguage + "/");
        tasks = new TaskGroup({
          concurrency: 1
        }).done(function(err) {
          return next(err);
        });
        docpad.getCollection('documents').findAll({
          relativePath: {
            $startsWith: pathStart
          }
        }).forEach(function(document) {
          var documentData;
          docpad.log('debug', 'languagemaker: processing document: ' + document.get('relativePath'));
          documentData = fs.readFileSync(path.resolve(process.cwd(), config.rootToDocumentsPathFragment, document.get('relativePath')));
          return config.languages.forEach(function(lang) {
            docpad.log('debug', "languagemaker: processing language '" + lang + "' for document: " + (document.get('relativePath')));
            return tasks.addTask(function(complete) {
              var newDoc, relativeOutPath, relativePath;
              if (lang === config.defaultLanguage) {
                return complete();
              }
              relativePath = document.get('relativePath').replace(pathStart, path.normalize(lang + "/"));
              relativeOutPath = relativePath.split('.').slice(0, 2).join('.');
              if (docpad.getCollection('documents').findOne({
                relativePath: {
                  $startsWith: relativeOutPath
                }
              })) {
                docpad.log('info', 'languagemaker: file already exists, so not making ' + relativePath);
                return complete();
              }
              newDoc = docpad.createDocument({
                isDocument: true,
                encoding: 'utf8',
                relativePath: relativePath,
                data: documentData,
                meta: {
                  language: lang,
                  languagemakered: true
                }
              });
              return newDoc.action('load', function(err) {
                if (err) {
                  return complete(err);
                }
                docpad.getDatabase().add(newDoc);
                docpad.log('debug', "languagemaker: finished language '" + lang + "' for document: " + (document.get('relativePath')));
                return complete();
              });
            });
          });
        });
        tasks.run();
        return this;
      };

      return LanguageMaker;

    })(BasePlugin);
  };

}).call(this);
